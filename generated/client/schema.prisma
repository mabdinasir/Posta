// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["deno"]
  output          = "../generated/client"
}

generator erd {
  provider = "prisma-erd-generator"
  output = "../ERD.svg"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @unique @default(uuid())
  email           String   @unique
  password        String
  firstName       String
  lastName        String
  isGoogleAuth    Boolean  @default(false)
  isEmailVerified Boolean  @default(false)
  isDeleted       Boolean  @default(false)
  isSignedIn      Boolean  @default(false)
  createdAt       DateTime @default(now())
  createdBy       String?
  updatedAt       DateTime @updatedAt
  updatedBy       String?

  userTypes UserType[]
}

model UserType {
  id        String   @id @unique @default(uuid())
  name      String
  createdAt DateTime @default(now())
  createdBy String?
  updatedAt DateTime @updatedAt
  updatedBy String?

  users User[]
}

model Country {
  id        String   @id @unique @default(uuid())
  name      String
  createdAt DateTime @default(now())
  createdBy String?
  updatedAt DateTime @updatedAt
  updatedBy String?

  cities City[]
}

model City {
  id                String              @id @unique @default(uuid())
  name              String
  createdAt         DateTime            @default(now())
  createdBy         String?
  updatedAt         DateTime            @updatedAt
  updatedBy         String

  countryId   String
  country     Country      @relation(fields: [countryId], references: [id])
  postOffices PostOffice[]
}

model PostOffice {
  id              String   @id @unique @default(uuid())
  name            String
  address         String
  contact         String
  managerId       String
  contactPerson   String
  createdAt       DateTime @default(now())
  createdBy       String?
  updatedAt       DateTime @updatedAt
  updatedBy       String

  cityId String
  city   City   @relation(fields: [cityId], references: [id])

  locations Location[]

}

model Location {
  id                            String         @id @unique @default(uuid())
  name                          String         @unique
  description                   String?
  createdAt                     DateTime       @default(now())
  createdBy                     String?
  updatedAt                     DateTime       @updatedAt
  updatedBy                     String?

  postOfficeInChargeId           String
  postOfficeInCharge             PostOffice     @relation(fields: [postOfficeInChargeId], references: [id])
}
