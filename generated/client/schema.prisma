// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["deno"]
  output          = "../generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// generator erd {
//   provider = "prisma-erd-generator"
//   output   = "./ERD.svg"
// }

model User {
  id              String   @id @unique @default(uuid())
  email           String   @unique
  password        String
  firstName       String
  lastName        String
  isGoogleAuth    Boolean  @default(false)
  isEmailVerified Boolean  @default(false)
  isDeleted       Boolean  @default(false)
  isSignedIn      Boolean  @default(false)
  createdAt       DateTime @default(now())
  createdBy       String?
  updatedAt       DateTime @updatedAt
  updatedBy       String?

  userTypes UserType[]
}

model UserType {
  id        String   @id @unique @default(uuid())
  name      String
  createdAt DateTime @default(now())
  createdBy String?
  updatedAt DateTime @updatedAt
  updatedBy String?

  users User[]
}

model Country {
  id        String   @id @unique @default(uuid())
  name      String
  createdAt DateTime @default(now())
  createdBy String?
  updatedAt DateTime @updatedAt
  updatedBy String?

  cities City[]
}

model City {
  id        String   @id @unique @default(uuid())
  name      String
  createdAt DateTime @default(now())
  createdBy String?
  updatedAt DateTime @updatedAt
  updatedBy String

  countryId   String
  country     Country      @relation(fields: [countryId], references: [id])
  postOffices PostOffice[]
}

model PostOffice {
  id            String   @id @unique @default(uuid())
  name          String
  address       String
  contact       String
  managerId     String
  contactPerson String
  createdAt     DateTime @default(now())
  createdBy     String?
  updatedAt     DateTime @updatedAt
  updatedBy     String

  cityId String
  city   City   @relation(fields: [cityId], references: [id])

  locations Location[]
}

model Location {
  id          String   @id @unique @default(uuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  createdBy   String?
  updatedAt   DateTime @updatedAt
  updatedBy   String?

  postOfficeInChargeId String
  postOfficeInCharge   PostOffice @relation(fields: [postOfficeInChargeId], references: [id])

  LocationTypeId String
  LocationType   LocationType @relation(fields: [LocationTypeId], references: [id])

  serviceId String
  services   Service @relation(fields: [serviceId], references: [id])

  collectingOptions     CollectingOption[]
  processingOptions     ProcessingOption[]

  mailStart Mail[] @relation("MailLocationStart")
  mailEnd Mail[] @relation("MailLocationEnd")
}


model LocationType {
  id          String   @id @unique @default(uuid())
  name        String   @unique
  createdAt   DateTime @default(now())
  createdBy   String?
  updatedAt   DateTime @updatedAt
  updatedBy   String?

  location Location[]
}

model Service {
  id          String   @id @unique @default(uuid())
  name        String   @unique
  description String?
  isActive    Boolean  @default(false)
  createdAt   DateTime @default(now())
  createdBy   String?
  updatedAt   DateTime @updatedAt
  updatedBy   String?

  location Location[]
}

model CollectingOption {
  id         String   @id @unique @default(uuid())
  optionName String   @unique
  createdAt  DateTime @default(now())
  createdBy  String?
  updatedAt  DateTime @updatedAt
  updatedBy  String?

  locations   Location[]
}

model ProcessingOption {
  id         String   @id @unique @default(uuid())
  optionName String   @unique
  createdAt  DateTime @default(now())
  createdBy  String?
  updatedAt  DateTime @updatedAt
  updatedBy  String?

  locations   Location[]
}

model Mail {
  id                  String        @id @unique @default(uuid())
  mailCode           String        @unique
  mailCategory_id    String
  recipientAddress   String
  senderAddress      String
  locationStart_id   String
  locationEnd_id     String?
  timeInserted       DateTime      @default(now())
  timeDelivered      DateTime?

  locationStart      Location      @relation("MailLocationStart", fields: [locationStart_id], references: [id])
  locationEnd        Location?     @relation("MailLocationEnd", fields: [locationEnd_id], references: [id])

  mailCarrierId       String
  mailCarrier         MailCarrier   @relation(fields: [mailCarrierId], references: [id])
}

model MailCarrier {
  id          String   @id @unique @default(uuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  createdBy   String?
  updatedAt   DateTime @updatedAt
  updatedBy   String?

  mail Mail[]
}
